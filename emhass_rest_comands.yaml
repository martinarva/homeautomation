rest_command:

  publish_data:
    url: http://192.168.1.35:5001/action/publish-data
    method: POST
    content_type: 'application/json'
    payload: '{}'

  dayahead_optim:
    url: http://192.168.1.35:5001/action/dayahead-optim
    method: POST
    content_type: 'application/json'
    payload: >-
      {
        "delta_forecast": 1,
        "load_cost_forecast": {{
          ((state_attr('sensor.nordpool_with_vat_and_tarifss', 'raw_today') | map(attribute='value') | list  + state_attr('sensor.nordpool_with_vat_and_tarifss', 'raw_tomorrow') | map(attribute='value') | list)[now().hour:][:24]) | tojson
        }},
        "prod_price_forecast": {{
          ((state_attr('sensor.nordpool_kwh_ee_eur_3_10_0', 'raw_today') | map(attribute='value') | list  + state_attr('sensor.nordpool_kwh_ee_eur_3_10_0', 'raw_tomorrow') | map(attribute='value') | list)[now().hour:][:24]) | tojson
        }},
        "prediction_horizon": {{
          (min(24, (((state_attr('sensor.nordpool_kwh_ee_eur_3_10_0', 'raw_today')|map(attribute='value')|list + state_attr('sensor.nordpool_kwh_ee_eur_3_10_0', 'raw_tomorrow') | map(attribute='value')| list)[now().hour:][:48]|list|length)))) | tojson
        }},
        "pv_power_forecast": {{
          (([states('sensor.solcast_pv_forecast_power_now')|int(0)] + state_attr('sensor.solcast_pv_forecast_forecast_today', 'detailedHourly')|selectattr('period_start','gt',utcnow()) | map(attribute='pv_estimate')|map('multiply',1000)|map('int')|list + state_attr('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedHourly')|selectattr('period_start','gt',utcnow()) | map(attribute='pv_estimate')|map('multiply',1000)|map('int')|list) | tojson)
        }},
        "var_model": "sensor.ss_load_power",
        "var_load": "sensor.ss_load_power"
      }

  naive_mpc_optim:
    url: http://192.168.1.35:5001/action/naive-mpc-optim
    method: POST
    content_type: 'application/json'
    payload: >-
      {
        "delta_forecast": 2,
        "load_cost_forecast": {{
          ((state_attr('sensor.nordpool_with_vat_and_tarifss', 'raw_today') | map(attribute='value') | list  + state_attr('sensor.nordpool_with_vat_and_tarifss', 'raw_tomorrow') | map(attribute='value') | list)[now().hour:][:48]) | tojson
        }},
        "prod_price_forecast": {{
          ((state_attr('sensor.nordpool_kwh_ee_eur_3_10_0', 'raw_today') | map(attribute='value') | list  + state_attr('sensor.nordpool_kwh_ee_eur_3_10_0', 'raw_tomorrow') | map(attribute='value') | list)[now().hour:][:48]) | tojson
        }},
        "prediction_horizon": {{
          (min(24, (((state_attr('sensor.nordpool_kwh_ee_eur_3_10_0', 'raw_today')|map(attribute='value')|list + state_attr('sensor.nordpool_kwh_ee_eur_3_10_0', 'raw_tomorrow') | map(attribute='value')| list)[now().hour:][:48]|list|length)))) | tojson
        }},
        "pv_power_forecast": {{
          (([states('sensor.solcast_pv_forecast_power_now')|int(0)] + state_attr('sensor.solcast_pv_forecast_forecast_today', 'detailedHourly')|selectattr('period_start','gt',utcnow()) | map(attribute='pv_estimate')|map('multiply',1000)|map('int')|list + state_attr('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedHourly')|selectattr('period_start','gt',utcnow()) | map(attribute='pv_estimate')|map('multiply',1000)|map('int')|list) | tojson)
        }},
        "var_model": "sensor.ss_load_power",
        "var_load": "sensor.ss_load_power"     
      }

  ml_forecast_model_fit:
    url: http://192.168.1.35:5001/action/forecast-model-fit
    method: POST
    content_type: 'application/json'
    payload: >-
      {
        "days_to_retrieve": 19,
        "model_type": "load_forecast",
        "var_model": "sensor.ss_load_power",
        "num_lags": 48,
        "split_date_delta": "48h",
        "perform_backtest": "True"
      }

  ml_forecast_model_tune:
    url: http://192.168.1.35:5001/action/forecast-model-tune
    method: POST
    content_type: 'application/json'
    payload: >-
      {
        "days_to_retrieve": 19,
        "model_type": "load_forecast",
        "var_model": "sensor.ss_load_power",
        "num_lags": 48,
        "split_date_delta": "48h",
        "perform_backtest": "True"
      }

  ml_forecast_model_predict:
    url: http://192.168.1.35:5001/action/forecast-model-predict
    method: POST
    content_type: 'application/json'
    payload: >-
      {
        "model_type": "load_forecast",
        "var_model": "sensor.ss_load_power",
        "num_lags": 48
      }
